Functional Requirements

User Authentication
The system should allow users to log in using unique credentials for each individual user.

QR Code Scanning
Users will access the book search interface by scanning a QR code placed at the library entrance.

Book Search
Users should be able to search for books by entering the title, author name, or book number. The system will display the availability status of each book.

Book Availability Check
When users search for a book, the system must verify its availability. If a book is checked out, the system should show the expected return date.

Book Location Identification
The system must determine the exact physical location of the book, indicating its specific shelf position.

Automated Book Retrieval
The robotic arm should accurately pick up the requested book according to the system’s instructions and deliver it to a designated collection area.

Book Pickup Confirmation
After users collect the book, the system must confirm the pickup status and update the inventory to reflect the transaction.

Book Borrowing/Returning Process
The system must update the status of a book in the database when it is borrowed/returned.

Multi-Language Support
The system should support a range of languages to accommodate various user groups.

User Preference Management
The system should enable users to set and manage their preferences, such as preferred languages and notification settings.


Non-Functional Requirements:
Performance
The system should respond to user requests within 3 seconds for the majority of the users to maintain a positive experience.

Scalability
The system should be designed to expand smoothly to handle more users as needed, especially during busy times.

Security
All user information and book data should be securely stored and transmitted using high-level encryption.

Reliability
The system should maintain a high level of availability, aiming for 99.5% uptime throughout the year to provide consistent service.

Usability
The interface should follow accessibility standards to ensure that all users, including those with disabilities, find it easy to navigate and use.

Constraints
Technology Constraint
The system will be built using the Python language for the backend and the React framework for the frontend to ensure smooth integration.

Regulatory Constraint
The system will comply with GDPR data privacy regulations to safeguard user data and provide options for data management.

Resource Constraint
The system’s CPU and memory usage should remain within 70% of capacity during peak usage times to avoid slowing down the service.
